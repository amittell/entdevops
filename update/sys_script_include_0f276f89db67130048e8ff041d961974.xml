<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_snc_entdevops.SlackMessage</api_name>
        <client_callable>false</client_callable>
        <description/>
        <name>SlackMessage</name>
        <script><![CDATA[var SlackMessage = Class.create();
SlackMessage.prototype = {
    initialize: function() {
		this.payload.attachments = [];
	},
    
    send: function (text, channel) {
		var success = true;
		var slackURL = 'https://hooks.slack.com/services/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';
        // Set the text and channel (or fall back to defaults)
        this.payload.text = text || this.payload.text;
        this.payload.channel = channel || this.payload.channel;

        var encoded_payload = new global.JSON().encode(this.payload);
		gs.info('Encoded Payload: ' + encoded_payload);
        
        // Create and send the REST Message
        var rest = new sn_ws.RESTMessageV2('Slack', 'post');
		
		if (this.payload.channel === '#demo-dev') {
			rest.setEndpoint(slackURL);
		} else {
			// Send to #demo-ops by default
			rest.setEndpoint(slackURL);
		}
		
		rest.setRequestBody(encoded_payload);
        
		// Use asynchronous call due to BR contraints in scoped app
		var response = rest.executeAsync();
		response.waitForResponse(30);
		
		responseBody = response.haveError() ? response.getErrorMessage() : response.getBody();
		
		if (response.getStatusCode() == 200) {
			gs.info('[SI - SlackMessage] Successfully sent Slack message\nResponse Body: ' + responseBody);
		} else {
		    gs.error('[SI - SlackMessage] Failed to send Slack message: ' + responseBody);
		    success = false;
		}
		
        return success;
    },
	
	sendTestButton: function (text, channel) {
		this.payload.attachments.push({'callback_id': '1234',
									   'attachment_type': 'default',
									   'text': text || 'testing button',
									   'actions': [{'name': 'test',
													'text': 'Test Button',
													'type' : 'button',
													'value': 'test'
													}],
									   'color':'good'});
		
		this.send('', channel);
	},
	
	sendIncidentButton: function (text, channel, incidentNumber) {
		this.payload.attachments.push({'callback_id': incidentNumber,
									   'title': text,
									   'title_link': 'https://' + gs.getProperty('instance_name') + '.service-now.com/nav_to.do?uri=incident.do?sys_id=' + incidentNumber,
									   'attachment_type': 'default',
									   'actions': [{'name': 'claim',
													'text': 'Claim',
													'type' : 'button',
													'value': 'claimed',
												    'style': 'primary'},
												   {'name': 'close',
												    'text': 'Resolve',
												    'type': 'button',
												    'value': 'closed'}
												  ],
									   'color':'danger'});
		
		return this.send('', channel);
	},
    
    'payload': {
        'channel': '#demo-ops',
        'text': '',
        'attachments': []
    },

    type: 'SlackMessage'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2018-07-25 17:28:54</sys_created_on>
        <sys_id>0f276f89db67130048e8ff041d961974</sys_id>
        <sys_mod_count>1</sys_mod_count>
        <sys_name>SlackMessage</sys_name>
        <sys_package display_value="entdevops" source="x_snc_entdevops">86b561e0dba7930048e8ff041d9619c9</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="entdevops">86b561e0dba7930048e8ff041d9619c9</sys_scope>
        <sys_update_name>sys_script_include_0f276f89db67130048e8ff041d961974</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2018-07-25 19:27:49</sys_updated_on>
    </sys_script_include>
</record_update>
